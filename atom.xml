<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随笔</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liushuai97.github.io/"/>
  <updated>2019-10-14T07:05:01.195Z</updated>
  <id>https://liushuai97.github.io/</id>
  
  <author>
    <name>前端菜鸟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基本命令</title>
    <link href="https://liushuai97.github.io/2019/10/14/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://liushuai97.github.io/2019/10/14/Linux基本命令/</id>
    <published>2019-10-14T06:39:59.000Z</published>
    <updated>2019-10-14T07:05:01.195Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:19 GMT+0800 (GMT+08:00) --><h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>arch</code></td><td>显示机器的处理器架构</td></tr><tr><td><code>uname -m</code></td><td>显示机器的处理器架构</td></tr><tr><td><code>uname -r</code></td><td>显示正在使用的内核版本</td></tr><tr><td><code>dmidecode -q</code></td><td>显示硬件系统部件 - (SMBIOS / DMI)</td></tr><tr><td><code>hdparm -i /dev/hda</code></td><td>罗列一个磁盘的架构特性</td></tr><tr><td><code>hdparm -tT /dev/sda</code></td><td>在磁盘上执行测试性读取操作</td></tr><tr><td><code>cat /proc/cpuinfo</code></td><td>显示CPU info的信息</td></tr><tr><td><code>cat /proc/interrupts</code></td><td>显示中断</td></tr><tr><td><code>cat /proc/meminfo</code></td><td>校验内存使用</td></tr><tr><td><code>cat /proc/swaps</code></td><td>显示哪些swap被使用</td></tr><tr><td><code>cat /proc/version</code></td><td>显示内核的版本</td></tr><tr><td><code>cat /proc/net/dev</code></td><td>显示网络适配器及统计</td></tr><tr><td><code>cat /proc/mounts</code></td><td>显示已加载的文件系统</td></tr><tr><td><code>lspci -tv</code></td><td>罗列 PCI 设备</td></tr><tr><td><code>lsusb -tv</code></td><td>显示 USB 设备</td></tr><tr><td><code>date</code></td><td>显示系统日期</td></tr><tr><td><code>cal 2007</code></td><td>显示2007年的日历表</td></tr><tr><td><code>date 041217002007.00</code></td><td>设置日期和时间 - 月日时分年.秒</td></tr><tr><td><code>clock -w</code></td><td>将时间修改保存到 BIOS</td></tr></tbody></table><h4 id="关机-系统的关机、重启以及登出"><a href="#关机-系统的关机、重启以及登出" class="headerlink" title="关机 (系统的关机、重启以及登出 )"></a>关机 (系统的关机、重启以及登出 )</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>shutdown -h now</code></td><td>关闭系统</td></tr><tr><td><code>init 0</code></td><td>关闭系统</td></tr><tr><td><code>telinit 0</code></td><td>关闭系统</td></tr><tr><td><code>shutdown -h hours:minutes &amp;</code></td><td>按预定时间关闭系统</td></tr><tr><td><code>shutdown -c</code></td><td>取消按预定时间关闭系统</td></tr><tr><td><code>shutdown -r now</code></td><td>重启</td></tr><tr><td><code>reboot</code></td><td>重启</td></tr><tr><td><code>logout</code></td><td>注销</td></tr></tbody></table><h4 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>cd /home</code></td><td>进入<code>/home</code>目录</td></tr><tr><td><code>cd ..</code></td><td>返回上一级目录</td></tr><tr><td><code>cd ../..</code></td><td>返回上两级目录</td></tr><tr><td><code>cd</code></td><td>进入个人的主目录</td></tr><tr><td><code>cd ~user1</code></td><td>进入个人的主目录</td></tr><tr><td><code>cd -</code></td><td>返回上次所在的目录</td></tr><tr><td><code>pwd</code></td><td>显示工作路径</td></tr><tr><td><code>ls</code></td><td>查看目录中的文件</td></tr><tr><td><code>ls -F</code></td><td>查看目录中的文件</td></tr><tr><td><code>ls -l</code></td><td>显示文件和目录的详细资料</td></tr><tr><td><code>ls -a</code></td><td>显示隐藏文件</td></tr><tr><td><code>ls *[0-9]*</code></td><td>显示包含数字的文件名和目录名</td></tr><tr><td><code>tree</code></td><td>显示文件和目录由根目录开始的树形结构</td></tr><tr><td><code>lstree</code></td><td>显示文件和目录由根目录开始的树形结构</td></tr><tr><td><code>mkdir dir1</code></td><td>创建一个叫做 ‘dir1’ 的目录’</td></tr><tr><td><code>mkdir dir1 dir2</code></td><td>同时创建两个目录</td></tr><tr><td><code>mkdir -p /tmp/dir1/dir2</code></td><td>创建一个目录树</td></tr><tr><td><code>rm -f file1</code></td><td>删除一个叫做 ‘file1’ 的文件’</td></tr><tr><td><code>rmdir dir1</code></td><td>删除一个叫做 ‘dir1’ 的目录’</td></tr><tr><td><code>rm -rf dir1</code></td><td>删除一个叫做 ‘dir1’ 的目录并同时删除其内容</td></tr><tr><td><code>rm -rf dir1 dir2</code></td><td>同时删除两个目录及它们的内容</td></tr><tr><td><code>mv dir1 new_dir</code></td><td>重命名/移动 一个目录</td></tr><tr><td><code>cp file1 file2</code></td><td>复制一个文件</td></tr><tr><td><code>cp dir/* .</code></td><td>复制一个目录下的所有文件到当前工作目录</td></tr><tr><td><code>cp -a /tmp/dir1 .</code></td><td>复制一个目录到当前工作目录</td></tr><tr><td><code>cp -a dir1 dir2</code></td><td>复制一个目录</td></tr><tr><td><code>ln -s file1 lnk1</code></td><td>创建一个指向文件或目录的软链接</td></tr><tr><td><code>ln file1 lnk1</code></td><td>创建一个指向文件或目录的物理链接</td></tr><tr><td><code>touch -t 0712250000 file1</code></td><td>修改一个文件或目录的时间戳 - (YYMMDDhhmm)</td></tr></tbody></table><h4 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>find / -name file1</code></td><td>从 ‘/‘ 开始进入根文件系统搜索文件和目录</td></tr><tr><td><code>find / -user user1</code></td><td>搜索属于用户 ‘user1’ 的文件和目录</td></tr><tr><td><code>find /home/user1 -name \*.bin</code></td><td>在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件</td></tr><tr><td><code>find /usr/bin -type f -atime +100</code></td><td>搜索在过去100天内未被使用过的执行文件</td></tr><tr><td><code>find /usr/bin -type f -mtime -10</code></td><td>搜索在10天内被创建或者修改过的文件</td></tr><tr><td><code>find / -name \*.rpm -exec chmod 755 &#39;{}&#39; \</code></td><td>搜索以 ‘.rpm’ 结尾的文件并定义其权限</td></tr><tr><td><code>find / -xdev -name \*.rpm</code></td><td>搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备</td></tr><tr><td><code>locate \*.ps</code></td><td>寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令</td></tr><tr><td><code>whereis halt</code></td><td>显示一个二进制文件、源码或man的位置</td></tr><tr><td><code>which halt</code></td><td>显示一个二进制文件或可执行文件的完整路径</td></tr></tbody></table><h4 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>mount /dev/hda2 /mnt/hda2</code></td><td>挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在</td></tr><tr><td><code>umount /dev/hda2</code></td><td>卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出</td></tr><tr><td><code>fuser -km /mnt/hda2</code></td><td>当设备繁忙时强制卸载</td></tr><tr><td><code>umount -n /mnt/hda2</code></td><td>运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</td></tr><tr><td><code>mount /dev/fd0 /mnt/floppy</code></td><td>挂载一个软盘</td></tr><tr><td><code>mount /dev/cdrom /mnt/cdrom</code></td><td>挂载一个cdrom或dvdrom</td></tr><tr><td><code>mount /dev/hdc /mnt/cdrecorder</code></td><td>挂载一个cdrw或dvdrom</td></tr><tr><td><code>mount /dev/hdb /mnt/cdrecorder</code></td><td>挂载一个cdrw或dvdrom</td></tr><tr><td><code>mount -o loop file.iso /mnt/cdrom</code></td><td>挂载一个文件或ISO镜像文件</td></tr><tr><td><code>mount -t vfat /dev/hda5 /mnt/hda5</code></td><td>挂载一个Windows FAT32文件系统</td></tr><tr><td><code>mount /dev/sda1 /mnt/usbdisk</code></td><td>挂载一个usb 捷盘或闪存设备</td></tr><tr><td><code>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share</code></td><td>挂载一个windows网络共享</td></tr></tbody></table><h4 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>df -h</code></td><td>显示已经挂载的分区列表</td></tr><tr><td>`ls -lSr</td><td>more`</td></tr><tr><td><code>du -sh dir1</code></td><td>估算目录 ‘dir1’ 已经使用的磁盘空间’</td></tr><tr><td>`du -sk *</td><td>sort -rn`</td></tr><tr><td>`rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’</td><td>sort -k1,1n`</td></tr><tr><td>`dpkg-query -W -f=’${Installed-Size;10}t${Package}n’</td><td>sort -k1,1n`</td></tr></tbody></table><h4 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>groupadd group_name</code></td><td>创建一个新用户组</td></tr><tr><td><code>groupdel group_name</code></td><td>删除一个用户组</td></tr><tr><td><code>groupmod -n new_group_name old_group_name</code></td><td>重命名一个用户组</td></tr><tr><td><code>useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1</code></td><td>创建一个属于 “admin” 用户组的用户</td></tr><tr><td><code>useradd user1</code></td><td>创建一个新用户</td></tr><tr><td><code>userdel -r user1</code></td><td>删除一个用户 ( ‘-r’ 排除主目录)</td></tr><tr><td><code>usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1</code></td><td>修改用户属性</td></tr><tr><td><code>passwd</code></td><td>修改口令</td></tr><tr><td><code>passwd user1</code></td><td>修改一个用户的口令 (只允许root执行)</td></tr><tr><td><code>chage -E 2005-12-31 user1</code></td><td>设置用户口令的失效期限</td></tr><tr><td><code>pwck</code></td><td>检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户</td></tr><tr><td><code>grpck</code></td><td>检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组</td></tr><tr><td><code>newgrp group_name</code></td><td>登陆进一个新的群组以改变新创建文件的预设群组</td></tr></tbody></table><h4 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>ls -lh</code></td><td>显示权限</td></tr><tr><td>`ls /tmp</td><td>pr -T5 -W$COLUMNS`</td></tr><tr><td><code>chmod ugo+rwx directory1</code></td><td>设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</td></tr><tr><td><code>chmod go-rwx directory1</code></td><td>删除群组(g)与其他人(o)对目录的读写执行权限</td></tr><tr><td><code>chown user1 file1</code></td><td>改变一个文件的所有人属性</td></tr><tr><td><code>chown -R user1 directory1</code></td><td>改变一个目录的所有人属性并同时改变改目录下所有文件的属性</td></tr><tr><td><code>chgrp group1 file1</code></td><td>改变文件的群组</td></tr><tr><td><code>chown user1:group1 file1</code></td><td>改变一个文件的所有人和群组属性</td></tr><tr><td><code>find / -perm -u+s</code></td><td>罗列一个系统中所有使用了SUID控制的文件</td></tr><tr><td><code>chmod u+s /bin/file1</code></td><td>设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</td></tr><tr><td><code>chmod u-s /bin/file1</code></td><td>禁用一个二进制文件的 SUID位</td></tr><tr><td><code>chmod g+s /home/public</code></td><td>设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</td></tr><tr><td><code>chmod g-s /home/public</code></td><td>禁用一个目录的 SGID 位</td></tr><tr><td><code>chmod o+t /home/public</code></td><td>设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</td></tr><tr><td><code>chmod o-t /home/public</code></td><td>禁用一个目录的 STIKY 位</td></tr></tbody></table><h4 id="文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>chattr +a file1</code></td><td>只允许以追加方式读写文件</td></tr><tr><td><code>chattr +c file1</code></td><td>允许这个文件能被内核自动压缩/解压</td></tr><tr><td><code>chattr +d file1</code></td><td>在进行文件系统备份时，dump程序将忽略这个文件</td></tr><tr><td><code>chattr +i file1</code></td><td>设置成不可变的文件，不能被删除、修改、重命名或者链接</td></tr><tr><td><code>chattr +s file1</code></td><td>允许一个文件被安全地删除</td></tr><tr><td><code>chattr +S file1</code></td><td>一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</td></tr><tr><td><code>chattr +u file1</code></td><td>若文件被删除，系统会允许你在以后恢复这个被删除的文件</td></tr><tr><td><code>lsattr</code></td><td>显示特殊的属性</td></tr></tbody></table><h4 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>bunzip2 file1.bz2</code></td><td>解压一个叫做 ‘file1.bz2’的文件</td></tr><tr><td><code>bzip2 file1</code></td><td>压缩一个叫做 ‘file1’ 的文件</td></tr><tr><td><code>gunzip file1.gz</code></td><td>解压一个叫做 ‘file1.gz’的文件</td></tr><tr><td><code>gzip file1</code></td><td>压缩一个叫做 ‘file1’的文件</td></tr><tr><td><code>gzip -9 file1</code></td><td>最大程度压缩</td></tr><tr><td><code>rar a file1.rar test_file</code></td><td>创建一个叫做 ‘file1.rar’ 的包</td></tr><tr><td><code>rar a file1.rar file1 file2 dir1</code></td><td>同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</td></tr><tr><td><code>rar x file1.rar</code></td><td>解压rar包</td></tr><tr><td><code>unrar x file1.rar</code></td><td>解压rar包</td></tr><tr><td><code>tar -cvf archive.tar file1</code></td><td>创建一个非压缩的 tarball</td></tr><tr><td><code>tar -cvf archive.tar file1 file2 dir1</code></td><td>创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件</td></tr><tr><td><code>tar -tf archive.tar</code></td><td>显示一个包中的内容</td></tr><tr><td><code>tar -xvf archive.tar</code></td><td>释放一个包</td></tr><tr><td><code>tar -xvf archive.tar -C /tmp</code></td><td>将压缩包释放到 /tmp目录下</td></tr><tr><td><code>tar -cvfj archive.tar.bz2 dir1</code></td><td>创建一个bzip2格式的压缩包</td></tr><tr><td><code>tar -jxvf archive.tar.bz2</code></td><td>解压一个bzip2格式的压缩包</td></tr><tr><td><code>tar -cvfz archive.tar.gz dir1</code></td><td>创建一个gzip格式的压缩包</td></tr><tr><td><code>tar -zxvf archive.tar.gz</code></td><td>解压一个gzip格式的压缩包</td></tr><tr><td><code>zip file1.zip file1</code></td><td>创建一个zip格式的压缩包</td></tr><tr><td><code>zip -r file1.zip file1 file2 dir1</code></td><td>将几个文件和目录同时压缩成一个zip格式的压缩包</td></tr><tr><td><code>unzip file1.zip</code></td><td>解压一个zip格式压缩包</td></tr></tbody></table><h4 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>yum install package_name</code></td><td>下载并安装一个rpm包</td></tr><tr><td><code>yum localinstall package_name.rpm</code></td><td>将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</td></tr><tr><td><code>yum update package_name.rpm</code></td><td>更新当前系统中所有安装的rpm包</td></tr><tr><td><code>yum update package_name</code></td><td>更新一个rpm包</td></tr><tr><td><code>yum remove package_name</code></td><td>删除一个rpm包</td></tr><tr><td><code>yum list</code></td><td>列出当前系统中安装的所有包</td></tr><tr><td><code>yum search package_name</code></td><td>在rpm仓库中搜寻软件包</td></tr><tr><td><code>yum clean packages</code></td><td>清理rpm缓存删除下载的包</td></tr><tr><td><code>yum clean headers</code></td><td>删除所有头文件</td></tr><tr><td><code>yum clean all</code></td><td>删除所有缓存的包和头文件</td></tr></tbody></table><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>cat file1</code></td><td>从第一个字节开始正向查看文件的内容</td></tr><tr><td><code>tac file1</code></td><td>从最后一行开始反向查看一个文件的内容</td></tr><tr><td><code>more file1</code></td><td>查看一个长文件的内容</td></tr><tr><td><code>less file1</code></td><td>类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作</td></tr><tr><td><code>head -2 file1</code></td><td>查看一个文件的前两行</td></tr><tr><td><code>tail -2 file1</code></td><td>查看一个文件的最后两行</td></tr><tr><td><code>tail -f /var/log/messages</code></td><td>实时查看被添加到一个文件中的内容</td></tr></tbody></table><h4 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>dos2unix filedos.txt fileunix.txt</code></td><td>将一个文本文件的格式从MSDOS转换成UNIX</td></tr><tr><td><code>unix2dos fileunix.txt filedos.txt</code></td><td>将一个文本文件的格式从UNIX转换成MSDOS</td></tr><tr><td><code>recode ..HTML &lt; page.txt &gt; page.html</code></td><td>将一个文本文件转换成html</td></tr><tr><td>`recode -l</td><td>more`</td></tr></tbody></table><h4 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h4><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>ifconfig eth0</code></td><td>显示一个以太网卡的配置</td></tr><tr><td><code>ifup eth0</code></td><td>启用一个 ‘eth0’ 网络设备</td></tr><tr><td><code>ifdown eth0</code></td><td>禁用一个 ‘eth0’ 网络设备</td></tr><tr><td><code>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</code></td><td>控制IP地址</td></tr><tr><td><code>ifconfig eth0 promisc</code></td><td>设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)</td></tr><tr><td><code>dhclient eth0</code></td><td>以dhcp模式启用 ‘eth0’</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:19 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;系统信息&quot;&gt;&lt;a href=&quot;#系统信息&quot; class=&quot;headerlink&quot; title=&quot;系统信息&quot;&gt;&lt;/a&gt;系统信息&lt;/h4&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://liushuai97.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://liushuai97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境目录</title>
    <link href="https://liushuai97.github.io/2019/10/14/Linux%E7%8E%AF%E5%A2%83%E7%9B%AE%E5%BD%95/"/>
    <id>https://liushuai97.github.io/2019/10/14/Linux环境目录/</id>
    <published>2019-10-14T06:07:14.000Z</published>
    <updated>2019-10-14T06:35:17.774Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><h4 id="Linux下的目录都是做什么⽤的"><a href="#Linux下的目录都是做什么⽤的" class="headerlink" title="Linux下的目录都是做什么⽤的?"></a>Linux下的目录都是做什么⽤的?</h4><p><img src="menu.png" alt="kyrie irving"></p><ul><li><code>/bin</code></li></ul><p>系统有很多放置执行档的目录，但/bin比较特殊。因为/bin放置的是在单⼈维护模式下还能够被操作的指令。在/bin底下的指令可以被root与一般帐号所使用，主要有: cat,chmod(修改权限), chown, date, mv, mkdir, cp, bash等等常用的指令。</p><ul><li><code>/boot</code></li></ul><p>主要放置开机会使用到的档案，包括Linux核⼼档案以及开机选单与开机所需设定档等等。Linux kernel常⽤的档名为:vmlinuz，如果使⽤的是grub这个开机管理程式，则还会存在/boot/grub/这个⽬录。</p><ul><li><code>/dev</code></li></ul><p>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个⽬录当中。只要通过存取这个⽬录下的某个档案，就等于存取某个装置。比较重要的档案有/dev/null, /dev/zero, /dev/tty , /dev/lp, / dev/hd, /dev/sd*等等</p><ul><li><code>/etc</code></li></ul><p>系统主要的设定档⼏乎都放置在这个目录内，例如⼈员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让⼀般使⽤者查阅的，但是只有root有权⼒修改。 FHS建议不要放置可执⾏档(binary)在这个⽬目录中。 ⽐较重要的档案有:/etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的⽬录有:/etc/init.d/ :所有服务的预设启动 script都是放在这里的，例如要启动或者关闭iptables的话: /etc/init.d/iptables start、/etc/init.d/ iptables stop/etc/xinetd.d/ :这就是所谓的super daemon管理的 各项服务的设定档目录。/etc/X11/ :与X Window有关的各种设定档都在这⾥，尤其是xorg.conf或XF86Config这两个X Server的设定档。</p><ul><li><code>/home</code></li></ul><p>这是系统预设的使⽤者家⽬录(home directory)。 在你新增⼀个⼀般使⽤者帐号时， 预设的使⽤者家⽬录都会规范到这⾥来。⽐较重要的是，家⽬录有两种代号： ~ ：代 表当前使⽤者的家⽬录，⽽ ~guest：则代表⽤户名为guest的家⽬录。</p><ul><li><code>/lib</code></li></ul><p>系统的函式库⾮常的多，⽽/lib放置的则是在开机时会⽤到的函式库，以及在/bin 或/sbin底下的指令会呼叫的函式库⽽已 。什么是函式库呢？你可以将他想象成是外挂，某些指令必须要有这些外挂才能够顺利完成程式的执⾏之意。 尤其重要的 是/lib/modules/这个⽬录，因为该⽬录会放置核⼼相关的模组(驱动程式)。</p><ul><li><code>/media</code></li></ul><p>media是媒体的英⽂，顾名思义，这个/media底下放置的就是可移除的装置。 包括软 碟、光碟、DVD等等装置都暂时挂载于此。 常⻅的档名有：/media/ﬂoppy, /media/cdrom等等。</p><ul><li><code>/mnt</code></li></ul><p>如果你想要暂时挂载某些额外的装置，⼀般建议你可以放置到这个⽬录中。在很早时候，这个⽬录的⽤途与/media相同啦。 只是有了/media之后，这个⽬录就⽤来暂时挂载⽤了。</p><ul><li><code>/opt</code></li></ul><p>这个是给第三⽅协⼒软体放置的⽬录。什么是第三⽅协⼒软体啊？举例来说，KDE这 个桌⾯管理系统是⼀个独⽴的计画，不过他可以安装到Linux系统中，因此KDE的软体 就建议放置到此⽬录下了。另外，如果你想要⾃⾏安装额外的软体(⾮原本的 distribution提供的)，那么也能够将你的软体安装到这⾥来。不过，以前的Linux系统中，我们还是习惯放置在/usr/local⽬录下。</p><ul><li><code>/root</code></li></ul><p>系统管理员(root)的家⽬录。 之所以放在这⾥，是因为如果进⼊单⼈维护模式⽽仅挂载根⽬录时，该⽬录就能够拥有root的家⽬录，所以我们会希望root的家⽬录与根⽬录放置在同⼀个分区中。</p><ul><li><code>/sbin</code></li></ul><p>Linux有⾮常多指令是⽤来设定系统环境的，这些指令只有root才能够利⽤来设定系统，其他使⽤者最多只能⽤来查询⽽已。放在/sbin底下的为开机过程中所需要的，⾥⾯包括了开机、修复、还原系统所需要的指令。⾄于某些伺服器软体程式，⼀般则放置到/usr/sbin/当中。⾄于本机⾃⾏安装的软体所产⽣的系统执⾏档(system binary)， 则放置到/usr/local/sbin/当中了。常⻅的指令包括：fdisk, fsck, ifconﬁg, init, mkfs等等。</p><ul><li><code>/srv</code></li></ul><p>srv可以视为service的缩写，是⼀些⽹路服务启动之后，这些服务所需要取⽤的资料⽬录。常⻅的服务例如WWW, FTP等等。 举例来说，WWW是服器需要的⽹⻚资料就可以放置在/srv/www/⾥⾯。呵呵，看来平时我们编写的代码应该放到这⾥了。</p><ul><li><code>/tmp</code></li></ul><p>这是让⼀般使⽤者或者是正在执⾏的程序暂时放置档案的地⽅。这个⽬录是任何⼈都能够存取的，所以你需要定期的清理⼀下。当然，重要资料不可放置在此⽬录啊。 因为FHS甚⾄建议在开机时，应该要将/tmp下的资料都删除。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;Linux下的目录都是做什么⽤的&quot;&gt;&lt;a href=&quot;#Linux下的目录都是做什么⽤的&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://liushuai97.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://liushuai97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>HTML DOM Attribute 对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/08/HTML-DOM-Attribute-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/08/HTML-DOM-Attribute-对象属性与方法/</id>
    <published>2019-10-08T00:18:46.000Z</published>
    <updated>2019-10-08T00:42:47.904Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><h4 id="Attr对象"><a href="#Attr对象" class="headerlink" title="Attr对象"></a>Attr对象</h4><p>在HTMl DOM中，Attr对象表示HTML属性<br>HTML属性始终属于HTML元素</p><h4 id="NamedNodeMap对象"><a href="#NamedNodeMap对象" class="headerlink" title="NamedNodeMap对象"></a>NamedNodeMap对象</h4><p>在HTML DOM中，NamedNodeMap对象表示元素属性节点的无序集合。<br>NamedNodeMap中的节点可通过名称或索引（数字）来访问。</p><h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><table><thead><tr><th align="center">属性 / 方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">attr.isId</td><td>如果属性是 id 类型，则返回 true，否则返回 false。</td></tr><tr><td align="center">attr.name</td><td>返回属性的名称。</td></tr><tr><td align="center">attr.value</td><td>设置或返回属性的值。</td></tr><tr><td align="center">attr.specified</td><td>如果已指定属性，则返回 true，否则返回 false。</td></tr><tr><td align="center">nodemap.getNamedItem()</td><td>从 NamedNodeMap 返回指定的属性节点。</td></tr><tr><td align="center">nodemap.item()</td><td>返回 NamedNodeMap 中位于指定下标的节点。</td></tr><tr><td align="center">nodemap.length</td><td>返回 NamedNodeMap 中的节点数。</td></tr><tr><td align="center">nodemap.removeNamedItem()</td><td>移除指定的属性节点。</td></tr><tr><td align="center">nodemap.setNamedItem()</td><td>设置指定的属性节点（通过名称）。</td></tr></tbody></table><h4 id="DOM4-警告！"><a href="#DOM4-警告！" class="headerlink" title="DOM4 警告！"></a>DOM4 警告！</h4><p>在W3C DOM Core中，Attr(attribute)对象从Node对象继承所有属性和方法。<br>在DOM4中，Attr对象不再从Node继承。<br>为了保证未来的代码安全，您应该避免在属性对象上使用节点对象的属性和方法：</p><table><thead><tr><th align="center">属性 / 方法</th><th>避免的理由</th></tr></thead><tbody><tr><td align="center">attr.appendChild()</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.attributes</td><td>属性没有属性。</td></tr><tr><td align="center">attr.baseURI</td><td>使用 document.baseURI 代替。</td></tr><tr><td align="center">attr.childNodes</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.cloneNode()</td><td>使用 attr.value 代替。</td></tr><tr><td align="center">attr.firstChild</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.hasAttributes()</td><td>属性没有属性。</td></tr><tr><td align="center">attr.hasChildNodes</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.insertBefore()</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.isEqualNode()</td><td>没有意义。</td></tr><tr><td align="center">attr.isSameNode()</td><td>没有意义。</td></tr><tr><td align="center">attr.isSupported()</td><td>始终为 true。</td></tr><tr><td align="center">attr.lastChild</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.nextSibling</td><td>属性没有同级节点。</td></tr><tr><td align="center">attr.nodeName</td><td>使用 attr.name 代替。</td></tr><tr><td align="center">attr.nodeType</td><td>始终为 2 (ATTRIBUTE_NODE)。</td></tr><tr><td align="center">attr.nodeValue</td><td>使用 attr.value 代替。</td></tr><tr><td align="center">attr.normalize()</td><td>属性无法被正常化。</td></tr><tr><td align="center">attr.ownerDocument</td><td>始终是您的 HTML 文档。</td></tr><tr><td align="center">attr.ownerElement</td><td>这是您用来访问该属性的 HTML 元素。</td></tr><tr><td align="center">attr.parentNode</td><td>这是您用来访问该属性的 HTML 元素。</td></tr><tr><td align="center">attr.previousSibling</td><td>属性没有同级节点。</td></tr><tr><td align="center">attr.removeChild</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.replaceChild</td><td>属性没有子节点。</td></tr><tr><td align="center">attr.textContent</td><td>使用 attr.value 代替。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;Attr对象&quot;&gt;&lt;a href=&quot;#Attr对象&quot; class=&quot;headerlink&quot; title=&quot;Attr对象&quot;&gt;&lt;/a&gt;Att
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML DOM Element 对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/08/HTML-DOM-Element-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/08/HTML-DOM-Element-对象属性与方法/</id>
    <published>2019-10-08T00:05:24.000Z</published>
    <updated>2019-10-08T00:14:12.675Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>除了Document对象之外，Element对象就要算是Web变成中最常用的对象了。Element用于变现xml或html元素，提供了对元素标签名、子节点及特性的访问。</p><p>Element对象具有以下特征：</p><ul><li>nodeType的值为1</li><li>nodeName的值为元素的标签名</li><li>nodeValue的值为null</li><li>parentNode可能是Document或Element</li><li>其子节点可能是Element、Text、Comment、ProcessingInstruction、CDATASection或EntityReference.</li></ul><p>HTML DOM节点，在HTMLDOM（文档对象模型）中，每个部分都是节点：</p><ul><li>文档本身是文档节点</li><li>所有HTML元素是元素节点</li><li>所有HTML属性是属性节点</li><li>HTML元素内的文本是文本节点</li><li>注释是注释节点</li></ul><p>Element对象</p><p>在HTML DOM中，Element对象表示HTML元素。<br>Element对象可以拥有类型为元素节点、文本节点、注释节点的子节点。<br>NodeList对象百事节点列表，比如HTMl元素的子节点集合。<br>元素也可以拥有属性。属性是属性节点。</p><h4 id="Element对象属性和方法"><a href="#Element对象属性和方法" class="headerlink" title="Element对象属性和方法"></a>Element对象属性和方法</h4><table><thead><tr><th align="center">属性 / 方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">element.accessKey</td><td>设置或返回元素的快捷键。</td></tr><tr><td align="center">element.appendChild()</td><td>向元素添加新的子节点，作为最后一个子节点。</td></tr><tr><td align="center">element.attributes</td><td>返回元素属性的 NamedNodeMap。</td></tr><tr><td align="center">element.childNodes</td><td>返回元素子节点的 NodeList。</td></tr><tr><td align="center">element.className</td><td>设置或返回元素的 class 属性。</td></tr><tr><td align="center">element.clientHeight</td><td>返回元素的可见高度。</td></tr><tr><td align="center">element.clientWidth</td><td>返回元素的可见宽度。</td></tr><tr><td align="center">element.cloneNode()</td><td>克隆元素。</td></tr><tr><td align="center">element.compareDocumentPosition()</td><td>比较两个元素的文档位置。</td></tr><tr><td align="center">element.contentEditable</td><td>设置或返回元素的文本方向。</td></tr><tr><td align="center">element.dir</td><td>设置或返回元素的内容是否可编辑。</td></tr><tr><td align="center">element.firstChild</td><td>返回元素的首个子。</td></tr><tr><td align="center">element.getAttribute()</td><td>返回元素节点的指定属性值。</td></tr><tr><td align="center">element.getAttributeNode()</td><td>返回指定的属性节点。</td></tr><tr><td align="center">element.getElementsByTagName()</td><td>返回拥有指定标签名的所有子元素的集合。</td></tr><tr><td align="center">element.getFeature()</td><td>返回实现了指定特性的 API 的某个对象。</td></tr><tr><td align="center">element.getUserData()</td><td>返回关联元素上键的对象。</td></tr><tr><td align="center">element.hasAttribute()</td><td>如果元素拥有指定属性，则返回true，否则返回 false。</td></tr><tr><td align="center">element.hasAttributes()</td><td>如果元素拥有属性，则返回 true，否则返回 false。</td></tr><tr><td align="center">element.hasChildNodes()</td><td>如果元素拥有子节点，则返回 true，否则 false。</td></tr><tr><td align="center">element.id</td><td>设置或返回元素的 id。</td></tr><tr><td align="center">element.innerHTML</td><td>设置或返回元素的内容。</td></tr><tr><td align="center">element.insertBefore()</td><td>在指定的已有的子节点之前插入新节点。</td></tr><tr><td align="center">element.isContentEditable</td><td>设置或返回元素的内容。</td></tr><tr><td align="center">element.isDefaultNamespace()</td><td>如果指定的 namespaceURI 是默认的，则返回 true，否则返回 false。</td></tr><tr><td align="center">element.isEqualNode()</td><td>检查两个元素是否相等。</td></tr><tr><td align="center">element.isSameNode()</td><td>检查两个元素是否是相同的节点。</td></tr><tr><td align="center">element.isSupported()</td><td>如果元素支持指定特性，则返回 true。</td></tr><tr><td align="center">element.lang</td><td>设置或返回元素的语言代码。</td></tr><tr><td align="center">element.lastChild</td><td>返回元素的最后一个子元素。</td></tr><tr><td align="center">element.namespaceURI</td><td>返回元素的 namespace URI。</td></tr><tr><td align="center">element.nextSibling</td><td>返回位于相同节点树层级的下一个节点。</td></tr><tr><td align="center">element.nodeName</td><td>返回元素的名称。</td></tr><tr><td align="center">element.nodeType</td><td>返回元素的节点类型。</td></tr><tr><td align="center">element.nodeValue</td><td>设置或返回元素值。</td></tr><tr><td align="center">element.normalize()</td><td>合并元素中相邻的文本节点，并移除空的文本节点。</td></tr><tr><td align="center">element.offsetHeight</td><td>返回元素的高度。</td></tr><tr><td align="center">element.offsetWidth</td><td>返回元素的宽度。</td></tr><tr><td align="center">element.offsetLeft</td><td>返回元素的水平偏移位置。</td></tr><tr><td align="center">element.offsetParent</td><td>返回元素的偏移容器。</td></tr><tr><td align="center">element.offsetTop</td><td>返回元素的垂直偏移位置。</td></tr><tr><td align="center">element.ownerDocument</td><td>返回元素的根元素（文档对象）。</td></tr><tr><td align="center">element.parentNode</td><td>返回元素的父节点。</td></tr><tr><td align="center">element.previousSibling</td><td>返回位于相同节点树层级的前一个元素。</td></tr><tr><td align="center">element.removeAttribute()</td><td>从元素中移除指定属性。</td></tr><tr><td align="center">element.removeAttributeNode()</td><td>移除指定的属性节点，并返回被移除的节点。</td></tr><tr><td align="center">element.removeChild()</td><td>从元素中移除子节点。</td></tr><tr><td align="center">element.replaceChild()</td><td>替换元素中的子节点。</td></tr><tr><td align="center">element.scrollHeight</td><td>返回元素的整体高度。</td></tr><tr><td align="center">element.scrollLeft</td><td>返回元素左边缘与视图之间的距离。</td></tr><tr><td align="center">element.scrollTop</td><td>返回元素上边缘与视图之间的距离。</td></tr><tr><td align="center">element.scrollWidth</td><td>返回元素的整体宽度。</td></tr><tr><td align="center">element.setAttribute()</td><td>把指定属性设置或更改为指定值。</td></tr><tr><td align="center">element.setAttributeNode()</td><td>设置或更改指定属性节点。</td></tr><tr><td align="center">element.setIdAttribute()</td><td>无</td></tr><tr><td align="center">element.setIdAttributeNode()</td><td>无</td></tr><tr><td align="center">element.setUserData()</td><td>把对象关联到元素上的键。</td></tr><tr><td align="center">element.style</td><td>设置或返回元素的 style 属性。</td></tr><tr><td align="center">element.tabIndex</td><td>设置或返回元素的 tab 键控制次序。</td></tr><tr><td align="center">element.tagName</td><td>返回元素的标签名。</td></tr><tr><td align="center">element.textContent</td><td>设置或返回节点及其后代的文本内容。</td></tr><tr><td align="center">element.title</td><td>设置或返回元素的 title 属性。</td></tr><tr><td align="center">element.toString()</td><td>把元素转换为字符串。</td></tr><tr><td align="center">nodelist.item()</td><td>返回 NodeList 中位于指定下标的节点。</td></tr><tr><td align="center">nodelist.length</td><td>返回 NodeList 中的节点数。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;除了Document对象之外，Element对象就要算是Web变成中最常用的对象了。Element用于变现xml或html元素，提供了对元素标签
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML DOM Document 对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/06/HTML-DOM-Document-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/06/HTML-DOM-Document-对象属性与方法/</id>
    <published>2019-10-06T01:34:51.000Z</published>
    <updated>2019-10-06T01:50:32.968Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>Document对象</p><p>每个载入浏览器的HTML文档都会成为Document对象。</p><p>Document对象使我们可以从脚本中对HTML页面中的所有元素进行访问。</p><p>提示：Document对象是Window对象的一部分，可通过window.document舒心对其进行访问。</p><h4 id="Document对象集合"><a href="#Document对象集合" class="headerlink" title="Document对象集合"></a>Document对象集合</h4><table><thead><tr><th align="center">集合</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>all[]</code></td><td>提供对文档中所有 HTML 元素的访问。</td></tr><tr><td align="center"><code>anchors[]</code></td><td>返回对文档中所有 Anchor 对象的引用。</td></tr><tr><td align="center"><code>applets</code></td><td>返回对文档中所有 Applet 对象的引用。</td></tr><tr><td align="center"><code>forms[]</code></td><td>返回对文档中所有 Form 对象引用。</td></tr><tr><td align="center"><code>images[]</code></td><td>返回对文档中所有 Image 对象引用。</td></tr><tr><td align="center"><code>links[]</code></td><td>返回对文档中所有 Area 和 Link 对象引用。</td></tr></tbody></table><h4 id="Document-对象属性"><a href="#Document-对象属性" class="headerlink" title="Document 对象属性"></a>Document 对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">body</td><td>提供对 <code>&lt;body&gt;</code> 元素的直接访问。对于定义了框架集的文档，该属性引用最外层的<frameset>。</frameset></td></tr><tr><td align="center">cookie</td><td>设置或返回与当前文档有关的所有 cookie。</td></tr><tr><td align="center">domain</td><td>返回当前文档的域名。</td></tr><tr><td align="center">lastModified</td><td>返回文档被最后修改的日期和时间。</td></tr><tr><td align="center">referrer</td><td>返回载入当前文档的文档的 URL。</td></tr><tr><td align="center">title</td><td>返回当前文档的标题。</td></tr><tr><td align="center">URL</td><td>返回当前文档的 URL。</td></tr></tbody></table><h4 id="Document-对象方法"><a href="#Document-对象方法" class="headerlink" title="Document 对象方法"></a>Document 对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">close()</td><td>关闭用 document.open() 方法打开的输出流，并显示选定的数据。</td></tr><tr><td align="center">getElementById()</td><td>返回对拥有指定 id 的第一个对象的引用。</td></tr><tr><td align="center">getElementsByName()</td><td>返回带有指定名称的对象集合。</td></tr><tr><td align="center">getElementsByTagName()</td><td>返回带有指定标签名的对象集合。</td></tr><tr><td align="center">open()</td><td>打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。</td></tr><tr><td align="center">write()</td><td>向文档写 HTML 表达式 或 JavaScript 代码。</td></tr><tr><td align="center">writeln()</td><td>等同于 write() 方法，不同的是在每个表达式之后写一个换行符。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Document对象&lt;/p&gt;&lt;p&gt;每个载入浏览器的HTML文档都会成为Document对象。&lt;/p&gt;&lt;p&gt;Document对象使我们可以从脚本中
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Browser对象 Location对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/02/Browser%E5%AF%B9%E8%B1%A1-Location%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/02/Browser对象-Location对象属性与方法/</id>
    <published>2019-10-02T05:11:51.000Z</published>
    <updated>2019-10-02T05:18:10.613Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>location是最有用的BOM对象之一，它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。事实上，location对象是很特别的一个对象，因为它既是window对象的属性，也是document对象的属性；换句话说，window.location和document.location引用的是同一个对象。</p><p>location对象的用处不只表现在它保存着当前文档的信息，还表现在它将URL解析为独立的片段，让开发人员可以通过不同的属性访问这些片段。</p><h4 id="location对象属性"><a href="#location对象属性" class="headerlink" title="location对象属性"></a>location对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">hash</td><td>设置会返回从#号开始的URL（锚）。</td></tr><tr><td align="center">host</td><td>设置或返回主机名和当前URL的端口号。</td></tr><tr><td align="center">hostname</td><td>设置或返回当前URL的主机名。</td></tr><tr><td align="center">href</td><td>设置或返回完整的URL。</td></tr><tr><td align="center">pathname</td><td>设置或返回当前URL的路径部分。</td></tr><tr><td align="center">port</td><td>设置或返回当前URL的端口号。</td></tr><tr><td align="center">protocol</td><td>设置或返回当前URL的协议。</td></tr><tr><td align="center">search</td><td>设置或返回从问号（?）开始的URL（查询部分）。</td></tr></tbody></table><h4 id="location对象方法"><a href="#location对象方法" class="headerlink" title="location对象方法"></a>location对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">assign()</td><td>加载新的文档</td></tr><tr><td align="center">reload()</td><td>重新加载当前文档</td></tr><tr><td align="center">replace()</td><td>用新的文档替换当前文档。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;location是最有用的BOM对象之一，它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。事实上，location对象是很特别的
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Browser对象 History对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/02/Browser%E5%AF%B9%E8%B1%A1-History%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/02/Browser对象-History对象属性与方法/</id>
    <published>2019-10-02T05:05:54.000Z</published>
    <updated>2019-10-02T05:11:13.001Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>History对象，History对象包含用户（在浏览器窗口中）访问过的URL。</p><p>History对象是window对象的一部分，可通过window.history属性对其进行访问。</p><p>注释：没有应用History对象的公开标准，不过所有浏览器都支持该对象。</p><p>History对象保存着用户上网的历史记录，从窗口被打开的那一刻算起。因为history是window对象的属性，因此每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。处于安全方面的考虑，开发人员无法得知用户浏览过的URL。不过借由用户访问过的页面立碑，同样可以在不知道实际URL的情况下实现后退和前进。</p><h4 id="History对象属性"><a href="#History对象属性" class="headerlink" title="History对象属性"></a>History对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">length</td><td>返回浏览器历史列表中URL数量。</td></tr></tbody></table><h4 id="History对象方法"><a href="#History对象方法" class="headerlink" title="History对象方法"></a>History对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">back()</td><td>加载history列表中的前一个URL。</td></tr><tr><td align="center">forward()</td><td>加载history列表中的下一个URL。</td></tr><tr><td align="center">go()</td><td>加载history列表中的某个具体页面。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;History对象，History对象包含用户（在浏览器窗口中）访问过的URL。&lt;/p&gt;&lt;p&gt;History对象是window对象的一部分，可通
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Browser对象 Screen对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/02/Browser%E5%AF%B9%E8%B1%A1-Screen%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/02/Browser对象-Screen对象属性与方法/</id>
    <published>2019-10-02T04:57:38.000Z</published>
    <updated>2019-10-02T05:05:14.611Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>JavaScript中有几个对象在变成汇总用处不大，而screen对象就是其中之一。screen对象基本上只用来表明客户端的能力，其中包括浏览器窗口外部的显示器的信息，如像素宽度和高度等。每个浏览器中的screen对象都包含各不相同的属性。</p><p>Screen对象</p><p>Screen对象包含有关客户端显示屏幕的信息。<br>注释：没有应用于screen对象的公开标准，不过所有浏览器都支持该对象。</p><h4 id="Screen对象属性"><a href="#Screen对象属性" class="headerlink" title="Screen对象属性"></a>Screen对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">availHeight</td><td>返回显示屏幕的高度（除windows任务栏之外）。</td></tr><tr><td align="center">availWidth</td><td>返回显示屏幕的宽度（除windows任务栏之外）。</td></tr><tr><td align="center">bufferDepth</td><td>设置或返回调色板的比特深度。</td></tr><tr><td align="center">colorDepth</td><td>返回目标设备或缓冲器上的调色板的比特深度。</td></tr><tr><td align="center">deviceXDPI</td><td>返回显示屏幕的每英寸水平点数。</td></tr><tr><td align="center">deviceYDPI</td><td>返回显示屏幕的每英寸垂直点数。</td></tr><tr><td align="center">fontSmoothingEnabled</td><td>返回用户是否在显示控制面板中启用字体平滑。</td></tr><tr><td align="center">height</td><td>返回显示屏幕的高度。</td></tr><tr><td align="center">logicalXDPI</td><td>返回显示屏幕每英寸的水平方向的常规点数。</td></tr><tr><td align="center">logicalYDPI</td><td>返回显示屏幕每英寸的垂直方向的常规点数。</td></tr><tr><td align="center">pixelDepth</td><td>返回显示屏幕的颜色分辨率（比特每像素）。</td></tr><tr><td align="center">updateInterval()</td><td>设置或返回屏幕的刷新率。</td></tr><tr><td align="center">width</td><td>返回显示器屏幕的宽度。</td></tr></tbody></table><p>Screen对象描述，每个window对象的screen属性都引用一个screen对象。screen对象中存放着显示浏览器屏幕的信息。JavaScript程序将利用这些信息来优化他们的输出，已达到用户的显示要求。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;JavaScript中有几个对象在变成汇总用处不大，而screen对象就是其中之一。screen对象基本上只用来表明客户端的能力，其中包括浏览器
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Browser对象 Navigator对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/02/Browser%E5%AF%B9%E8%B1%A1-Navigator%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/02/Browser对象-Navigator对象属性与方法/</id>
    <published>2019-10-02T02:36:10.000Z</published>
    <updated>2019-10-02T02:59:36.194Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>navigator对象，navigator对象包含有关浏览器的信息。</p><p>注释：没有应用于navigator对象的公开标准，不过所有浏览器都支持该对象。</p><p>Navigator对象集合，<code>plugins[]</code>,返回对文档中所有嵌入式对象的引用。该集合是一个Plugin对象的数组，其中的元素代表浏览器已经安装的插件。Plug-in对象提供的是有关插件的信息，其中包括它所支持的MIME类型的列表。虽然<code>plugins[]</code>数组是有IE4定义的，但是在IE4中它却总是空的，因为IE4不支持插件和Plugin对象。</p><h4 id="Navigator对象属性"><a href="#Navigator对象属性" class="headerlink" title="Navigator对象属性"></a>Navigator对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">appCodeName</td><td>返回浏览器的代码名。</td></tr><tr><td align="center">appMinorVersion</td><td>返回浏览器的次级版本。</td></tr><tr><td align="center">appName</td><td>返回浏览器的名称。</td></tr><tr><td align="center">appVersion</td><td>返回浏览器的平台和版本信息。</td></tr><tr><td align="center">browserLanguage</td><td>返回当前浏览器的语言。</td></tr><tr><td align="center">cookieEnabled</td><td>返回指明浏览器中是否启用cookie的布尔值。</td></tr><tr><td align="center">cpuClass</td><td>返回浏览器系统的CPU等级。</td></tr><tr><td align="center">onLine</td><td>返回指明系统是否处于脱机模式的布尔值。</td></tr><tr><td align="center">platform</td><td>返回运行浏览器的操作系统平台。</td></tr><tr><td align="center">systemLanguage</td><td>返回OS使用的默认语言。</td></tr><tr><td align="center">userAgent</td><td>返回由客户机发送服务器的user-agent头部的值。</td></tr><tr><td align="center">userLanguage</td><td>返回OS的自然语言设置。</td></tr></tbody></table><p>Naviagtor对象方法<br>方法|描述<br>:-:|-<br>javaEnabled()|规定浏览器是否启用Java。<br>tainEnabled()|规定浏览器是否启动数据污点(data tainting)。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;navigator对象，navigator对象包含有关浏览器的信息。&lt;/p&gt;&lt;p&gt;注释：没有应用于navigator对象的公开标准，不过所有浏览
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Browser对象 Window对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/10/02/Browser%E5%AF%B9%E8%B1%A1-Window%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/10/02/Browser对象-Window对象属性与方法/</id>
    <published>2019-10-02T01:51:10.000Z</published>
    <updated>2019-10-02T02:34:51.148Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>window对象，BOM的核心对象是window。它表示浏览器的一个实例。在浏览器总，window对象有双重角色，它既是通过JavaScript访问浏览器窗口的一个接口，又是ECMAScript规定的Global对象。</p><p>window对象表示浏览器中打开的窗口。如果问到包含框架（frame或iframe标签），浏览器会为HTML文档创建一个window对象，并未每个框架创建一个额外的window对象。</p><p>window对象集合，<code>frames[]</code>,返回窗口中所有命名的框架。该集合是window对象的数组，每个window对象在窗口中含有一个框架或<code>&lt;iframe&gt;&lt;/iframe&gt;</code>。属性<code>frames.length</code>存在数组<code>frames[]</code>中含有的元素个数。</p><h4 id="window对象属性"><a href="#window对象属性" class="headerlink" title="window对象属性"></a>window对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">closed</td><td>返回窗口是否已被关闭。</td></tr><tr><td align="center">defaultStatus</td><td>设置或返回窗口状态栏中的默认文本。</td></tr><tr><td align="center">document</td><td>对Document对象的只读引用。</td></tr><tr><td align="center">history</td><td>对History对象的只读引用。</td></tr><tr><td align="center">innerheight</td><td>返回窗口的文档显示区的高度。</td></tr><tr><td align="center">innerwidth</td><td>返回窗口的文档显示区的宽度。</td></tr><tr><td align="center">length</td><td>设置或返回窗口中的框架数量。</td></tr><tr><td align="center">location</td><td>用于窗口或框架的Location对象。</td></tr><tr><td align="center">name</td><td>设置或返回窗口的名称。</td></tr><tr><td align="center">Naviagtor</td><td>对Navigator对象的只读引用。</td></tr><tr><td align="center">opener</td><td>返回对创建此窗口的窗口的引用。</td></tr><tr><td align="center">outerheight</td><td>返回窗口的外部高度。</td></tr><tr><td align="center">outerwidth</td><td>返回窗口的外部宽度。</td></tr><tr><td align="center">pageXOffset</td><td>设置或返回当前页面相对于窗口显示区左上角的X位置。</td></tr><tr><td align="center">pageYOffset</td><td>设置或返回当前页面相对于窗口显示区左上角的Y位置。</td></tr><tr><td align="center">parent</td><td>返回父窗口。</td></tr><tr><td align="center">Screen</td><td>对Screen对象的只读引用。</td></tr><tr><td align="center">self</td><td>返回对当前窗口的引用。等价于window属性。</td></tr><tr><td align="center">status</td><td>返回窗口状态栏的文本。</td></tr><tr><td align="center">top</td><td>返回最顶层的先辈窗口。</td></tr><tr><td align="center">window</td><td>window属性等价于self属性，它包含了对窗口自身的引用。</td></tr><tr><td align="center">screenLeft</td><td>只读整数。声明了窗口的左上角在屏幕上的x坐标和y坐标。IE、Safari和Opera支持screenLeft和screenRight，而FireFox和Safari支持screenX和screenY.</td></tr></tbody></table><h4 id="window对象方法"><a href="#window对象方法" class="headerlink" title="window对象方法"></a>window对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td align="center">blur()</td><td>把键盘焦点从顶层窗口移开。</td></tr><tr><td align="center">clearInterval()</td><td>取消由setInterval()设置的timeout。</td></tr><tr><td align="center">clearTimeout()</td><td>取消由setTimeout()方法设置的timeout。</td></tr><tr><td align="center">close()</td><td>关闭浏览器窗口。</td></tr><tr><td align="center">confirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td align="center">createPopup()</td><td>创建一个pop-up窗口。</td></tr><tr><td align="center">focus()</td><td>把键盘焦点给与一个窗口。</td></tr><tr><td align="center">moveBy()</td><td>可相对窗口的当前坐标把它移动指定的像素。</td></tr><tr><td align="center">moveTo()</td><td>把窗口的左上角移动到一个指定的坐标。</td></tr><tr><td align="center">open()</td><td>打开一个新的浏览器窗口或查找一个已命名的窗口。</td></tr><tr><td align="center">print()</td><td>打印当前窗口的内容。</td></tr><tr><td align="center">prompt()</td><td>显示课题是用户输入的对话框。</td></tr><tr><td align="center">resizeBy()</td><td>按照指定的像素调整窗口的大小。</td></tr><tr><td align="center">resizeTo()</td><td>把窗口的大小调整到指定的宽度和高度。</td></tr><tr><td align="center">scrollBy()</td><td>按照指定的像素值来滚动内容。</td></tr><tr><td align="center">scrollTo()</td><td>把内容滚动到指定的坐标。</td></tr><tr><td align="center">setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td align="center">setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;window对象，BOM的核心对象是window。它表示浏览器的一个实例。在浏览器总，window对象有双重角色，它既是通过JavaScript
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Events事件句柄</title>
    <link href="https://liushuai97.github.io/2019/09/30/JavaScript-Events%E4%BA%8B%E4%BB%B6%E5%8F%A5%E6%9F%84/"/>
    <id>https://liushuai97.github.io/2019/09/30/JavaScript-Events事件句柄/</id>
    <published>2019-09-30T08:22:42.000Z</published>
    <updated>2019-09-30T08:24:41.632Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>事件通常与函数配合使用，这样就可以通过发生的事件来驱动函数执行。</p><h4 id="事件句柄"><a href="#事件句柄" class="headerlink" title="事件句柄"></a>事件句柄</h4><p>HTML 4.0 的新特性之一是有能力使 HTML 事件触发浏览器中的动作（action），比如当用户点击某个 HTML 元素时启动一段 JavaScript。下面是一个属性列表，这些属性可插入 HTML 标签来定义事件动作。</p><table><thead><tr><th align="center">属性</th><th>当以下情况发生时，出现此事件</th></tr></thead><tbody><tr><td align="center">onabort</td><td>图像加载被中断</td></tr><tr><td align="center">onblur</td><td>元素失去焦点</td></tr><tr><td align="center">onchange</td><td>用户改变域的内容</td></tr><tr><td align="center">onclick</td><td>鼠标点击某个对象</td></tr><tr><td align="center">ondblclick</td><td>鼠标双击某个对象</td></tr><tr><td align="center">onerror</td><td>当加载文档或图像时发生某个错误</td></tr><tr><td align="center">onfocus</td><td>元素获得焦点</td></tr><tr><td align="center">onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td align="center">onkeypress</td><td>某个键盘的键被按下或按住</td></tr><tr><td align="center">onkeyup</td><td>某个键盘的键被松开</td></tr><tr><td align="center">onload</td><td>某个页面或图像被完成加载</td></tr><tr><td align="center">onmousedown</td><td>某个鼠标按键被按下</td></tr><tr><td align="center">onmousemove</td><td>鼠标被移动</td></tr><tr><td align="center">onmouseout</td><td>鼠标从某元素移开</td></tr><tr><td align="center">onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td align="center">onmouseup</td><td>某个鼠标按键被松开</td></tr><tr><td align="center">onreset</td><td>重置按钮被点击</td></tr><tr><td align="center">onresize</td><td>窗口或框架被调整尺寸</td></tr><tr><td align="center">onselect</td><td>文本被选定</td></tr><tr><td align="center">onsubmit</td><td>提交按钮被点击</td></tr><tr><td align="center">onunload</td><td>用户退出页面</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;事件通常与函数配合使用，这样就可以通过发生的事件来驱动函数执行。&lt;/p&gt;&lt;h4 id=&quot;事件句柄&quot;&gt;&lt;a href=&quot;#事件句柄&quot; class=
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Functions全局对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/30/JavaScript-Functions%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/30/JavaScript-Functions全局对象属性与方法/</id>
    <published>2019-09-30T08:00:21.000Z</published>
    <updated>2019-09-30T08:17:15.728Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>全局对象是预定义的对象，作为JavaScript的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。</p><p>在顶层JavaScript代码中，可以用关键字this引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p><p>全局对象是一个对象，而不是类。既没有构造函数，也无法实例化一个新的全局对象。</p><p>Function类型，说起来ECMAScript中什么最有意思，我想那莫过于函数了——而有意思的根源，则在于函数实际上是对象。每个函数都是Function类型的实例，而且都与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。</p><p>JavaScript 全局对象，全局属性和函数可用于所有内建的 JavaScript 对象。</p><h4 id="顶层属性（全局属性）"><a href="#顶层属性（全局属性）" class="headerlink" title="顶层属性（全局属性）"></a>顶层属性（全局属性）</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">Infinity</td><td>代表正的无穷大的数值。</td></tr><tr><td align="center">java</td><td>代表 java.* 包层级的一个 JavaPackage。</td></tr><tr><td align="center">NaN</td><td>指示某个值是不是数字值。</td></tr><tr><td align="center">Packages</td><td>根 JavaPackage 对象。</td></tr><tr><td align="center">undefined</td><td>指示未定义的值。</td></tr></tbody></table><h4 id="顶层函数（全局函数）"><a href="#顶层函数（全局函数）" class="headerlink" title="顶层函数（全局函数）"></a>顶层函数（全局函数）</h4><table><thead><tr><th align="center">函数</th><th>描述</th></tr></thead><tbody><tr><td align="center">decodeURI()</td><td>解码某个编码的 URI。</td></tr><tr><td align="center">decodeURIComponent()</td><td>解码一个编码的 URI 组件。</td></tr><tr><td align="center">encodeURI()</td><td>把字符串编码为 URI。</td></tr><tr><td align="center">encodeURIComponent()</td><td>把字符串编码为 URI 组件。</td></tr><tr><td align="center">escape()</td><td>对字符串进行编码。</td></tr><tr><td align="center">eval()</td><td>计算 JavaScript 字符串，并把它作为脚本代码来执行。</td></tr><tr><td align="center">getClass()</td><td>返回一个 JavaObject 的 JavaClass。</td></tr><tr><td align="center">isFinite()</td><td>检查某个值是否为有穷大的数。</td></tr><tr><td align="center">isNaN()</td><td>检查某个值是否是数字。</td></tr><tr><td align="center">Number()</td><td>把对象的值转换为数字。</td></tr><tr><td align="center">parseFloat()</td><td>解析一个字符串并返回一个浮点数。</td></tr><tr><td align="center">parseInt()</td><td>解析一个字符串并返回一个整数。</td></tr><tr><td align="center">String()</td><td>把对象的值转换为字符串。</td></tr><tr><td align="center">unescape()</td><td>对由 escape() 编码的字符串进行解码。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;全局对象是预定义的对象，作为JavaScript的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript RegExp对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/30/JavaScript-RegExp%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/30/JavaScript-RegExp对象属性与方法/</id>
    <published>2019-09-30T06:23:51.000Z</published>
    <updated>2019-09-30T06:40:39.069Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>ECMAScript通过RegExp类型来支持正则表达式。使用下面类似Perl的语法，就可以创建一个正则表达式。</p><p><code>var expression = /pattern/flags;</code></p><p>其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定类、分组、向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。</p><p>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；<br>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；<br>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</p><p>因此，一个正则表达式就是一个模式与上述3个标志的组合体。不同组合产生不同结果，如下面的例子所示。</p><p>RegExp 对象，正则表达式是描述字符模式的对象。</p><p>正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p><p>方括号，方括号用于查找某个范围内的字符：</p><table><thead><tr><th align="center">表达式</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>[abc]</code></td><td>查找方括号之间的任何字符。</td></tr><tr><td align="center"><code>[^abc]</code></td><td>查找任何不在方括号之间的字符。</td></tr><tr><td align="center"><code>[0-9]</code></td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td align="center"><code>[a-z]</code></td><td>查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td align="center"><code>[A-Z]</code></td><td>查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td align="center"><code>[A-z]</code></td><td>查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td align="center"><code>[adgk]</code></td><td>查找给定集合内的任何字符。</td></tr><tr><td align="center"><code>[^adgk]</code></td><td>查找给定集合外的任何字符。</td></tr><tr><td align="center">`(red</td><td>blue</td></tr></tbody></table><p>元字符，元字符（Metacharacter）是拥有特殊含义的字符：</p><table><thead><tr><th align="center">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>.</code></td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td align="center"><code>\w</code></td><td>查找单词字符。</td></tr><tr><td align="center"><code>\W</code></td><td>查找非单词字符。</td></tr><tr><td align="center"><code>\d</code></td><td>查找数字。</td></tr><tr><td align="center"><code>\D</code></td><td>查找非数字字符。</td></tr><tr><td align="center"><code>\s</code></td><td>查找空白字符。</td></tr><tr><td align="center"><code>\S</code></td><td>查找非空白字符。</td></tr><tr><td align="center"><code>\b</code></td><td>匹配单词边界。</td></tr><tr><td align="center"><code>\B</code></td><td>匹配非单词边界。</td></tr><tr><td align="center"><code>\0</code></td><td>查找 NUL 字符。</td></tr><tr><td align="center"><code>\n</code></td><td>查找换行符。</td></tr><tr><td align="center"><code>\f</code></td><td>查找换页符。</td></tr><tr><td align="center"><code>\r</code></td><td>查找回车符。</td></tr><tr><td align="center"><code>\t</code></td><td>查找制表符。</td></tr><tr><td align="center"><code>\v</code></td><td>查找垂直制表符。</td></tr><tr><td align="center"><code>\xxx</code></td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td align="center"><code>\xdd</code></td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td align="center"><code>\uxxxx</code></td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><p>量词</p><table><thead><tr><th align="center">量词</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>n+</code></td><td>匹配任何包含至少一个 n 的字符串。</td></tr><tr><td align="center"><code>n*</code></td><td>匹配任何包含零个或多个 n 的字符串。</td></tr><tr><td align="center"><code>n?</code></td><td>匹配任何包含零个或一个 n 的字符串。</td></tr><tr><td align="center"><code>n{X}</code></td><td>匹配包含 X 个 n 的序列的字符串。</td></tr><tr><td align="center"><code>n{X,Y}</code></td><td>匹配包含 X 至 Y 个 n 的序列的字符串。</td></tr><tr><td align="center"><code>n{X,}</code></td><td>匹配包含至少 X 个 n 的序列的字符串。</td></tr><tr><td align="center"><code>n$</code></td><td>匹配任何结尾为 n 的字符串。</td></tr><tr><td align="center"><code>^n</code></td><td>匹配任何开头为 n 的字符串。</td></tr><tr><td align="center"><code>?=n</code></td><td>匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td align="center"><code>?!n</code></td><td>匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><h4 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">compile</td><td>编译正则表达式。</td></tr><tr><td align="center">exec</td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td align="center">test</td><td>检索字符串中指定的值。返回 true 或 false。</td></tr></tbody></table><ul><li>支持正则表达式的 String 对象的方法</li></ul><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">search</td><td>检索与正则表达式相匹配的值。</td></tr><tr><td align="center">match</td><td>找到一个或多个正则表达式的匹配。</td></tr><tr><td align="center">replace</td><td>替换与正则表达式匹配的子串。</td></tr><tr><td align="center">split</td><td>把字符串分割为字符串数组。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;ECMAScript通过RegExp类型来支持正则表达式。使用下面类似Perl的语法，就可以创建一个正则表达式。&lt;/p&gt;&lt;p&gt;&lt;code&gt;var
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript String对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/30/JavaScript-String%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/30/JavaScript-String对象属性与方法/</id>
    <published>2019-09-30T01:13:25.000Z</published>
    <updated>2019-09-30T06:33:27.008Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>String类型用于表示由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以由双引号（”）或单引号（’）表示，因此下面两种字符串的写法都是有效的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var firstName = &quot;Nicholas&quot;;</span><br><span class="line">var lastName = &apos;Zakas&apos;;</span><br></pre></td></tr></table></figure><p>字符字面量，String数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符。</p><table><thead><tr><th align="center">字面量</th><th>含义</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td>换行</td></tr><tr><td align="center"><code>\t</code></td><td>制表</td></tr><tr><td align="center"><code>\b</code></td><td>空格</td></tr><tr><td align="center"><code>\r</code></td><td>回车</td></tr><tr><td align="center"><code>\f</code></td><td>换页符</td></tr><tr><td align="center"><code>\\</code></td><td>斜杆</td></tr><tr><td align="center"><code>\&#39;</code></td><td>单引号（’）,在用单引号表示的字符串中使用。</td></tr><tr><td align="center"><code>\&quot;</code></td><td>双引号（”）,在用双引号表示的字符串中使用。</td></tr><tr><td align="center"><code>\xnn</code></td><td>以十六进制代码nn表示的一个字符（其中n为0~F）。例如，\x41表示”A”</td></tr><tr><td align="center"><code>\unnnn</code></td><td>以十六进制代码nnnn表示的一个Unicode字符（其中n为0~F）。例如，\u03a3表示希腊字符Σ</td></tr></tbody></table><p>String 对象<br>String 对象用于处理文本（字符串）。</p><p>String 对象创建方法： new String().</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var txt = new String(&quot;string&quot;);</span><br><span class="line">或者更简单方式：</span><br><span class="line">var txt = &quot;string&quot;;</span><br></pre></td></tr></table></figure><h4 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">constructor</td><td>对创建该对象的函数的引用</td></tr><tr><td align="center">length</td><td>字符串的长度</td></tr><tr><td align="center">prototype</td><td>允许您向对象添加属性和方法</td></tr></tbody></table><h4 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td align="center">charCodeAt()</td><td>返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td align="center">concat()</td><td>连接两个或更多字符串，并返回新的字符串。</td></tr><tr><td align="center">fromCharCode()</td><td>将 Unicode 编码转为字符。</td></tr><tr><td align="center">indexOf()</td><td>返回某个指定的字符串值在字符串中首次出现的位置。</td></tr><tr><td align="center">lastIndexOf()</td><td>从后向前搜索字符串。</td></tr><tr><td align="center">match()</td><td>查找找到一个或多个正则表达式的匹配。</td></tr><tr><td align="center">replace()</td><td>在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。</td></tr><tr><td align="center">search()</td><td>查找与正则表达式相匹配的值。</td></tr><tr><td align="center">slice()</td><td>提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td align="center">split()</td><td>把字符串分割为字符串数组。</td></tr><tr><td align="center">substr()</td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td align="center">substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td align="center">toLowerCase()</td><td>把字符串转换为小写。</td></tr><tr><td align="center">toUpperCase()</td><td>把字符串转换为大写。</td></tr><tr><td align="center">trim()</td><td>去除字符串两边的空白</td></tr><tr><td align="center">valueOf()</td><td>返回某个字符串对象的原始值。</td></tr></tbody></table><h4 id="String-HTML-包装方法"><a href="#String-HTML-包装方法" class="headerlink" title="String HTML 包装方法"></a>String HTML 包装方法</h4><p>HTML 包装方法返回加入了适当HTML标签的字符串。</p><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">anchor()</td><td>创建 HTML 锚。</td></tr><tr><td align="center">big()</td><td>用大号字体显示字符串。</td></tr><tr><td align="center">blink()</td><td>显示闪动字符串。</td></tr><tr><td align="center">bold()</td><td>使用粗体显示字符串。</td></tr><tr><td align="center">fixed()</td><td>以打字机文本显示字符串。</td></tr><tr><td align="center">fontcolor()</td><td>使用指定的颜色来显示字符串。</td></tr><tr><td align="center">fontsize()</td><td>使用指定的尺寸来显示字符串。</td></tr><tr><td align="center">italics()</td><td>使用斜体显示字符串。</td></tr><tr><td align="center">link()</td><td>将字符串显示为链接。</td></tr><tr><td align="center">small()</td><td>使用小字号来显示字符串。</td></tr><tr><td align="center">strike()</td><td>用于显示加删除线的字符串。</td></tr><tr><td align="center">sub()</td><td>把字符串显示为下标。</td></tr><tr><td align="center">sup()</td><td>把字符串显示为上标。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;String类型用于表示由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以由双引号（”）或单引号（’）表示，因此下面两种字符
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Number对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/28/JavaScript-Number%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/28/JavaScript-Number对象属性与方法/</id>
    <published>2019-09-28T01:32:02.000Z</published>
    <updated>2019-09-28T01:55:56.788Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>Number是数字值对应的引用类型。要创建Number对象，可以在调用Number构造函数时向其中传递响应的数值。</p><p><code>var numberObject = new Number(value);</code></p><p>注意：如果一个采纳数值不能转换为一个数字将返回NaN（非数字值）。</p><p>Number对象，Number对象是原始数值的包装对象。</p><h4 id="Number对象属性"><a href="#Number对象属性" class="headerlink" title="Number对象属性"></a>Number对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">constructor</td><td>返回对创建此对象的 Number 函数的引用。</td></tr><tr><td align="center">MAX_VALUE</td><td>可表示的最大的数。</td></tr><tr><td align="center">MIN_VALUE</td><td>可表示的最小的数。</td></tr><tr><td align="center">NEGATIVE_INFINITY</td><td>负无穷大，溢出时返回该值。</td></tr><tr><td align="center">NaN</td><td>非数字值。</td></tr><tr><td align="center">POSITIVE_INFINITY</td><td>正无穷大，溢出时返回该值。</td></tr><tr><td align="center">prototype</td><td>允许您有能力向对象添加属性和方法。</td></tr></tbody></table><h4 id="Number对象方法"><a href="#Number对象方法" class="headerlink" title="Number对象方法"></a>Number对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">toExponential(x)</td><td>把对象的值转换为指数计数法。</td></tr><tr><td align="center">toFixed(x)</td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td align="center">toPrecision(x)</td><td>把数字格式化为指定的长度。</td></tr><tr><td align="center">toString()</td><td>把数字转换为字符串，使用指定的基数。</td></tr><tr><td align="center">valueOf()</td><td>返回一个 Number 对象的基本数字值。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var numberObject = new Number(10)</span><br><span class="line"></span><br><span class="line">console.log(&quot;toExponential(x) Number对象方法：&quot; + numberObject.toExponential(1));</span><br><span class="line"></span><br><span class="line">numberObject = 12.54</span><br><span class="line"></span><br><span class="line">console.log(&quot;toFixed() Number对象方法：&quot; + numberObject.toFixed(0));</span><br><span class="line"></span><br><span class="line">console.log(&quot;toPrecision() Number对象方法：&quot; + numberObject.toPrecision(3));</span><br><span class="line"></span><br><span class="line">console.log(&quot;toString() Number对象方法：&quot; + numberObject.toString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;valueOf() Number对象方法：&quot; + numberObject.valueOf());</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Number是数字值对应的引用类型。要创建Number对象，可以在调用Number构造函数时向其中传递响应的数值。&lt;/p&gt;&lt;p&gt;&lt;code&gt;va
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Math对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/28/JavaScript-Math%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/28/JavaScript-Math对象属性与方法/</id>
    <published>2019-09-27T23:58:00.000Z</published>
    <updated>2019-09-28T01:26:30.781Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>ECMAScript还为保存数学公式和信息提供了一个公共位置，即Math对象。与我们再JavaScript直接编写的计算功能相比，Math对象提供的计算功能执行起来要快很多。Math对象还提供了辅助完成这些计算的属性和方法。</p><p>Math 对象</p><p>Math对象用于执行数学任务。<br>Math对象并不像Date和String那样是对象的类，因此没有构造函数Math()。</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = Math.PI; // 返回圆周率</span><br><span class="line">var y = Math.sprt(16); //返回16的平方根</span><br></pre></td></tr></table></figure><h4 id="Math对象的属性"><a href="#Math对象的属性" class="headerlink" title="Math对象的属性"></a>Math对象的属性</h4><p>Math对象包含的属性大都是数学计算中可能会用到的一些特殊值。</p><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">E</td><td>返回算术常量 e，即自然对数的底数（约等于2.718）。</td></tr><tr><td align="center">LN2</td><td>返回 2 的自然对数（约等于0.693）。</td></tr><tr><td align="center">LN10</td><td>返回 10 的自然对数（约等于2.302）。</td></tr><tr><td align="center">LOG2E</td><td>返回以 2 为底的 e 的对数（约等于 1.414）。</td></tr><tr><td align="center">LOG10E</td><td>返回以 10 为底的 e 的对数（约等于0.434）。</td></tr><tr><td align="center">PI</td><td>返回圆周率（约等于3.14159）。</td></tr><tr><td align="center">SQRT1_2</td><td>返回返回 2 的平方根的倒数（约等于 0.707）。</td></tr><tr><td align="center">SQRT2</td><td>返回 2 的平方根（约等于 1.414）。</td></tr></tbody></table><h4 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">abs(x)</td><td>返回 x 的绝对值。</td></tr><tr><td align="center">acos(x)</td><td>返回 x 的反余弦值。</td></tr><tr><td align="center">asin(x)</td><td>返回 x 的反正弦值。</td></tr><tr><td align="center">atan(x)</td><td>以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td></tr><tr><td align="center">atan2(y,x)</td><td>返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。</td></tr><tr><td align="center">ceil(x)</td><td>对数进行上舍入。</td></tr><tr><td align="center">cos(x)</td><td>返回数的余弦。</td></tr><tr><td align="center">exp(x)</td><td>返回 Ex 的指数。</td></tr><tr><td align="center">floor(x)</td><td>对 x 进行下舍入。</td></tr><tr><td align="center">log(x)</td><td>返回数的自然对数（底为e）。</td></tr><tr><td align="center">max(x,y,z,…,n)</td><td>返回 x,y,z,…,n 中的最高值。</td></tr><tr><td align="center">min(x,y,z,…,n)</td><td>返回 x,y,z,…,n中的最低值。</td></tr><tr><td align="center">pow(x,y)</td><td>返回 x 的 y 次幂。</td></tr><tr><td align="center">random()</td><td>返回 0 ~ 1 之间的随机数。</td></tr><tr><td align="center">round(x)</td><td>把数四舍五入为最接近的整数。</td></tr><tr><td align="center">sin(x)</td><td>返回数的正弦。</td></tr><tr><td align="center">sqrt(x)</td><td>返回数的平方根。</td></tr><tr><td align="center">tan(x)</td><td>返回角的正切。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;abs() Math对象方法：&quot; + Math.abs(-444));</span><br><span class="line"></span><br><span class="line">console.log(&quot;acos() Math对象方法：&quot; + Math.acos(0.5));</span><br><span class="line"></span><br><span class="line">console.log(&quot;asin() Math对象方法：&quot; + Math.asin(0.5));</span><br><span class="line"></span><br><span class="line">console.log(&quot;atan() Math对象方法：&quot; + Math.atan(1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;atan2() Math对象方法：&quot; + Math.atan2(1, 1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;cos() Math对象方法：&quot; + Math.cos(0.5));</span><br><span class="line"></span><br><span class="line">console.log(&quot;sin() Math对象方法：&quot; + Math.sin(0.5));</span><br><span class="line"></span><br><span class="line">console.log(&quot;tan() Math对象方法：&quot; + Math.tan(2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;ceil() Math对象方法：&quot; + Math.ceil(1.1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;floor() Math对象方法：&quot; + Math.floor(2.1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;round(x) Math对象方法：&quot; + Math.round(6.5));</span><br><span class="line"></span><br><span class="line">console.log(&quot;exp(x) Math对象方法：&quot; + Math.exp(2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;log(x) Math对象方法：&quot; + Math.log(2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;sqrt(x) Math对象方法：&quot; + Math.sqrt(4));</span><br><span class="line"></span><br><span class="line">console.log(&quot;pow(x,y) Math对象方法：&quot; + Math.pow(1,2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;max(x,y) Math对象方法：&quot; + Math.max(1,2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;min(x,y) Math对象方法：&quot; + Math.min(1,2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;random() Math对象方法：&quot; + Math.random());</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;ECMAScript还为保存数学公式和信息提供了一个公共位置，即Math对象。与我们再JavaScript直接编写的计算功能相比，Math对象提
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Date对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/27/JavaScript-Date%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/27/JavaScript-Date对象属性与方法/</id>
    <published>2019-09-27T07:12:06.000Z</published>
    <updated>2019-09-27T08:22:10.316Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>ECMAScript在调用Date构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根据特定的日期和时间创建日期对象，必须传入表示该日期的毫秒数（即从UTC时间1970年1月1日午夜起至该日期止的毫秒数）。</p><p>Date 对象，Date 对象用于处理日期和时间。</p><p>创建 Date 对象的语法：</p><p><code>var myDate=new Date()</code></p><p>注释：Date 对象会自动把当前日期和时间保存为其初始值。</p><h4 id="Date-对象属性"><a href="#Date-对象属性" class="headerlink" title="Date 对象属性"></a>Date 对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">constructor</td><td>返回对创建此对象的 Date 函数的引用。</td></tr><tr><td align="center">prototype</td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><h4 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">Date()</td><td>返回当日的日期和时间。</td></tr><tr><td align="center">getDate()</td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td align="center">getDay()</td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td align="center">getMonth()</td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td align="center">getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td align="center">getYear()</td><td>请使用 getFullYear() 方法代替。</td></tr><tr><td align="center">getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td align="center">getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td align="center">getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td align="center">getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td align="center">getTime()</td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td align="center">getTimezoneOffset()</td><td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td></tr><tr><td align="center">getUTCDate()</td><td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td></tr><tr><td align="center">getUTCDay()</td><td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td></tr><tr><td align="center">getUTCMonth()</td><td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td align="center">getUTCFullYear()</td><td>根据世界时从 Date 对象返回四位数的年份。</td></tr><tr><td align="center">getUTCHours()</td><td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td align="center">getUTCMinutes()</td><td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td align="center">getUTCSeconds()</td><td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td></tr><tr><td align="center">getUTCMilliseconds()</td><td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td align="center">parse()</td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td></tr><tr><td align="center">setDate()</td><td>设置 Date 对象中月的某一天 (1 ~ 31)。</td></tr><tr><td align="center">setMonth()</td><td>设置 Date 对象中月份 (0 ~ 11)。</td></tr><tr><td align="center">setFullYear()</td><td>设置 Date 对象中的年份（四位数字）。</td></tr><tr><td align="center">setYear()</td><td>请使用 setFullYear() 方法代替。</td></tr><tr><td align="center">setHours()</td><td>设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td align="center">setMinutes()</td><td>设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td align="center">setSeconds()</td><td>设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td align="center">setMilliseconds()</td><td>设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td align="center">setTime()</td><td>以毫秒设置 Date 对象。</td></tr><tr><td align="center">setUTCDate()</td><td>根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td></tr><tr><td align="center">setUTCMonth()</td><td>根据世界时设置 Date 对象中的月份 (0 ~ 11)。</td></tr><tr><td align="center">setUTCFullYear()</td><td>根据世界时设置 Date 对象中的年份（四位数字）。</td></tr><tr><td align="center">setUTCHours()</td><td>根据世界时设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td align="center">setUTCMinutes()</td><td>根据世界时设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td align="center">setUTCSeconds()</td><td>根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td align="center">setUTCMilliseconds()</td><td>根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td align="center">toSource()</td><td>返回该对象的源代码。</td></tr><tr><td align="center">toString()</td><td>把 Date 对象转换为字符串。</td></tr><tr><td align="center">toTimeString()</td><td>把 Date 对象的时间部分转换为字符串。</td></tr><tr><td align="center">toDateString()</td><td>把 Date 对象的日期部分转换为字符串。</td></tr><tr><td align="center">toGMTString()</td><td>请使用 toUTCString() 方法代替。</td></tr><tr><td align="center">toUTCString()</td><td>根据世界时，把 Date 对象转换为字符串。</td></tr><tr><td align="center">toLocaleString()</td><td>根据本地时间格式，把 Date 对象转换为字符串。</td></tr><tr><td align="center">toLocaleTimeString()</td><td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td></tr><tr><td align="center">toLocaleDateString()</td><td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td></tr><tr><td align="center">UTC()</td><td>根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</td></tr><tr><td align="center">valueOf()</td><td>返回 Date 对象的原始值。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line"></span><br><span class="line">console.log(&quot;Date() Date对象方法：&quot; + date);</span><br><span class="line"></span><br><span class="line">console.log(&quot;getDate() Date对象方法：&quot; + date.getDate());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getDay() Date对象方法：&quot; + date.getDay());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getMonth() Date对象方法：&quot; + (date.getMonth() + 1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;getFullYear() Date对象方法：&quot; + date.getFullYear());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getHours() Date对象方法：&quot; + date.getHours());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getMinutes() Date对象方法：&quot; + date.getMinutes());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getSeconds() Date对象方法：&quot; + date.getSeconds());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getMilliseconds() Date对象方法：&quot; + date.getMilliseconds());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getTimezoneOffset() Date对象方法：&quot; + date.getTimezoneOffset());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCDate() Date对象方法：&quot; + date.getUTCDate());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCDay() Date对象方法：&quot; + date.getUTCDay());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCMonth() Date对象方法：&quot; + (date.getUTCMonth() + 1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCFullYear() Date对象方法：&quot; + date.getUTCFullYear());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCHours() Date对象方法：&quot; + date.getUTCHours());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCMinutes() Date对象方法：&quot; + date.getUTCMinutes());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCSeconds() Date对象方法：&quot; + date.getUTCSeconds());</span><br><span class="line"></span><br><span class="line">console.log(&quot;getUTCMilliseconds() Date对象方法：&quot; + date.getUTCMilliseconds());</span><br><span class="line"></span><br><span class="line">console.log(&quot;setDate() Date对象方法：&quot; + date.setDate(15));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setMonth() Date对象方法：&quot; + date.setMonth(2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setFullYear() Date对象方法：&quot; + date.setFullYear(2017));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setHours() Date对象方法：&quot; + date.setHours(12));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setMinutes() Date对象方法：&quot; + date.setMinutes(45));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setSeconds() Date对象方法：&quot; + date.setSeconds(50));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setMilliseconds() Date对象方法：&quot; + date.setMilliseconds(999));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCDate() Date对象方法：&quot; + date.setUTCDate(22));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCMonth() Date对象方法：&quot; + date.setUTCMonth(3));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCFullYear() Date对象方法：&quot; + date.setUTCFullYear(2015));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCHours() Date对象方法：&quot; + date.setUTCHours(0));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCMinutes() Date对象方法：&quot; + date.setUTCMinutes(59));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCSeconds() Date对象方法：&quot; + date.setUTCSeconds(59));</span><br><span class="line"></span><br><span class="line">console.log(&quot;setUTCMilliseconds() Date对象方法：&quot; + date.setUTCMilliseconds(999));</span><br><span class="line"></span><br><span class="line">console.log(date)</span><br><span class="line"></span><br><span class="line">// console.log(&quot;toSource() Date对象方法：&quot; + date.toSource());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toString() Date对象方法：&quot; + typeof(date.toString()) + &quot; &quot; + date.toString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toTimeString() Date对象方法：&quot; + date.toTimeString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toDateString() Date对象方法：&quot; + date.toDateString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toGMTString() Date对象方法：&quot; + date.toGMTString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toUTCString() Date对象方法：&quot; + date.toUTCString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toLocaleString() Date对象方法：&quot; + date.toLocaleString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toLocaleTimeString() Date对象方法：&quot; + date.toLocaleTimeString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toLocaleDateString() Date对象方法：&quot; + date.toLocaleDateString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;UTC() Date对象方法：&quot; + Date.UTC(2014,12,1));</span><br><span class="line"></span><br><span class="line">console.log(&quot;valueOf() Date对象方法：&quot; + date.valueOf());</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;ECMAScript在调用Date构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根据特定的日期和时间创建日期对象，必须
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Boolean对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/27/JavaScript-Boolean%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/27/JavaScript-Boolean对象属性与方法/</id>
    <published>2019-09-27T07:08:21.000Z</published>
    <updated>2019-09-27T07:10:23.173Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>Boolean 对象，Boolean 对象表示两个值：”true” 或 “false”。</p><p>创建 Boolean 对象的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new Boolean(value);//构造函数</span><br><span class="line">Boolean(value);//转换函数</span><br></pre></td></tr></table></figure><p>参数</p><p>参数 value 由布尔对象存放的值或者要转换成布尔值的值。</p><p>返回值</p><p>当作为一个构造函数（带有运算符 new）调用时，Boolean() 将把它的参数转换成一个布尔值，并且返回一个包含该值的 Boolean 对象。</p><p>如果作为一个函数（不带有运算符 new）调用时，Boolean() 只将把它的参数转换成一个原始的布尔值，并且返回这个值。</p><p>注释：如果省略 value 参数，或者设置为 0、-0、null、””、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 “false”）。</p><h4 id="Boolean-对象属性"><a href="#Boolean-对象属性" class="headerlink" title="Boolean 对象属性"></a>Boolean 对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">constructor</td><td>返回对创建此对象的 Boolean 函数的引用</td></tr><tr><td align="center">prototype</td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><h4 id="Boolean-对象方法"><a href="#Boolean-对象方法" class="headerlink" title="Boolean 对象方法"></a>Boolean 对象方法</h4><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">toSource()</td><td>返回该对象的源代码。</td></tr><tr><td align="center">toString()</td><td>把逻辑值转换为字符串，并返回结果。</td></tr><tr><td align="center">valueOf()</td><td>返回 Boolean 对象的原始值。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Boolean 对象，Boolean 对象表示两个值：”true” 或 “false”。&lt;/p&gt;&lt;p&gt;创建 Boolean 对象的语法：&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Array对象属性与方法</title>
    <link href="https://liushuai97.github.io/2019/09/27/JavaScript-Array%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://liushuai97.github.io/2019/09/27/JavaScript-Array对象属性与方法/</id>
    <published>2019-09-27T06:40:43.000Z</published>
    <updated>2019-09-27T06:40:52.861Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><p>除了Object之外，Array类型恐怕是ECMAScrip中最常用的类型了。而且，ECMAScript中的数组与其他多数语言中的数组有着很大的区别。虽然ECMAScript数组与其他语言中的数组都是数据的有序列表，但与其他语言不同的是，EMCAScript数组的每一项可以保存任何类型的数据。也就是说，可以用数组的第一个位置来保存字符串，用第二位置来保存数值，用第三个位置来保存对象，以此类推。而且，ECMAScript数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p><p>JavaScript 本地对象和内置对象。</p><p>Array 对象，Array 对象用于在单个的变量中存储多个值。</p><p>创建Array对象的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Array();</span><br><span class="line">new Array(size);</span><br><span class="line">new Array(element0,element1m,...,elementn);</span><br></pre></td></tr></table></figure><p>参数</p><p>参数size是期望数组元素个数。返回的数组，length字段将被设为size的值。<br>参数element…,elementn是参数列表。当使用这些参数来调用构造函数Array()时，新创建的数组的元素就会被初始化为这些值。它的length字段也会被设置为参数的个数。</p><p>返回值</p><p>返回新创建并被初始化了的数组。<br>如果调用构造函数Array()时没有使用参数，那么返回的数组为空，length字段未0。<br>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为undefined的数组。<br>当其他参数调用Array()时，该构造函数将用参数指定的值初始化数组。<br>当把构造函数作为函数调用，不使用 new 运算符时，它的行为与使用 new 运算符调用它时的行为完全一样。</p><h4 id="Array-对象属性"><a href="#Array-对象属性" class="headerlink" title="Array 对象属性"></a>Array 对象属性</h4><table><thead><tr><th align="center">属性</th><th>描述</th></tr></thead><tbody><tr><td align="center">constructor</td><td>返回对创建此对象的数组函数的引用。</td></tr><tr><td align="center">length</td><td>设置或返回数组中元素的数目。</td></tr><tr><td align="center">prototype</td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var obj = new Array();</span><br><span class="line"></span><br><span class="line">obj = [&quot;ab&quot;,2,3,5,6,7,8,9,10];</span><br><span class="line"></span><br><span class="line">console.log(&quot;new Array() 创建数组：&quot;+obj);</span><br><span class="line"></span><br><span class="line">var type = Array.isArray(obj);</span><br><span class="line"></span><br><span class="line">console.log(&quot;Array.isArray(obj) 检测数组类型：&quot; + type);</span><br><span class="line"></span><br><span class="line">console.log(&quot;constructor 数组属性：&quot;+obj.constructor);</span><br><span class="line"></span><br><span class="line">console.log(&quot;length 数组属性：&quot; + obj.length);</span><br><span class="line"></span><br><span class="line">Array.prototype.name = 10</span><br><span class="line"></span><br><span class="line">Array.prototype.changed = function () &#123;</span><br><span class="line">    for(var i = 0; i &lt; this.length; i++ )&#123;</span><br><span class="line">        var tp = typeof(this[i]);</span><br><span class="line">        if(tp === &quot;string&quot;)&#123;</span><br><span class="line">            this[i] = this[i].toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        if(tp === &quot;number&quot;)&#123;</span><br><span class="line">            this[i] = this[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            this[i] = this[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.changed();</span><br><span class="line">console.log(&quot;prototype 数组属性：&quot; + obj.name + &quot;|&quot; + obj);</span><br></pre></td></tr></table></figure><h3 id="Array对象方法"><a href="#Array对象方法" class="headerlink" title="Array对象方法"></a>Array对象方法</h3><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">concat()</td><td>连接两个或更多的数组，不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</td></tr><tr><td align="center">join()</td><td>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</td></tr><tr><td align="center">pop()</td><td>删除并返回数组的最后一个元素。</td></tr><tr><td align="center">push()</td><td>向数组的末尾添加一个或更多元素，并返回新的长度。</td></tr><tr><td align="center">reverse()</td><td>颠倒数组中元素的顺序。</td></tr><tr><td align="center">shift()</td><td>删除并返回数组的第一个元素。</td></tr><tr><td align="center">slice()</td><td>从某个已有的数组返回选定的元素。</td></tr><tr><td align="center">sort()</td><td>对数组的元素进行排序。</td></tr><tr><td align="center">splice()</td><td>删除元素，并向数组添加新元素。</td></tr><tr><td align="center">toSource()</td><td>返回该对象的源代码。</td></tr><tr><td align="center">toString()</td><td>把数组转换为字符串，并返回结果。</td></tr><tr><td align="center">toLocaleString()</td><td>把数组转换为本地数组，并返回结果。</td></tr><tr><td align="center">unshift()</td><td>向数组的开头添加一个或更多元素，并返回新的长度。</td></tr><tr><td align="center">valueOf()</td><td>返回数组对象的原始值。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var a = Array(&quot;张三&quot;, &quot;李四&quot;);</span><br><span class="line"></span><br><span class="line">var b = new Array(&quot;王五&quot;, &quot;陈六&quot;);</span><br><span class="line"></span><br><span class="line">var c = a.concat(b)</span><br><span class="line"></span><br><span class="line">console.log(&quot;concat() 数组方法：原始值——&quot; + a + &quot;|返回值——&quot; + c);</span><br><span class="line"></span><br><span class="line">console.log(&quot;join() 数组方法：&quot; + c.join(&apos;|&apos;));</span><br><span class="line"></span><br><span class="line">console.log(&quot;pop() 数组方法：&quot; + c.pop() + &quot;|删除后的值——&quot; + c);</span><br><span class="line"></span><br><span class="line">console.log(&quot;push() 数组方法：&quot; + c.push(&quot;赵七&quot;) + &quot;|追加后的值——&quot; + c);</span><br><span class="line"></span><br><span class="line">console.log(&quot;reverse() 数组方法：&quot; + c.reverse());</span><br><span class="line"></span><br><span class="line">console.log(&quot;shift() 数组方法：&quot; + c.shift() + &quot;|删除后的值——&quot; + c);</span><br><span class="line"></span><br><span class="line">console.log(&quot;slice() 数组方法：&quot; + c.slice(-2));</span><br><span class="line"></span><br><span class="line">console.log(&quot;sort() 数组方法：&quot; + c.sort());</span><br><span class="line"></span><br><span class="line">console.log(&quot;splice() 数组方法：&quot; + c.splice(2,1,&quot;替换&quot;) + &quot;|删除后的值——&quot; + c);</span><br><span class="line"></span><br><span class="line">// 只有 Gecko 核心的浏览器（比如 Firefox）支持该方法，也就是说 IE、Safari、Chrome、Opera 等浏览器均不支持该方法。</span><br><span class="line">// console.log(&quot;toSource() 数组方法：&quot; + c.toSource());</span><br><span class="line"></span><br><span class="line">console.log(&quot;toString() 数组方法：&quot; + typeof(c.toString()) + &quot; | &quot; + typeof(c));</span><br><span class="line"></span><br><span class="line">console.log(&quot;toLocaleString() 数组方法：&quot; + typeof(c.toLocaleString()) + &quot; | &quot; + typeof(c));</span><br><span class="line"></span><br><span class="line">console.log(&quot;unshift() 数组方法：&quot; + c.unshift(&quot;开头&quot;,&quot;添加&quot;) + &quot;添加后的值——&quot; + c);</span><br><span class="line"></span><br><span class="line">console.log(&quot;valueOf() 数组方法：&quot; + c.valueOf());</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;除了Object之外，Array类型恐怕是ECMAScrip中最常用的类型了。而且，ECMAScript中的数组与其他多数语言中的数组有着很大的
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 继承</title>
    <link href="https://liushuai97.github.io/2019/09/25/JavaScript-%E7%BB%A7%E6%89%BF/"/>
    <id>https://liushuai97.github.io/2019/09/25/JavaScript-继承/</id>
    <published>2019-09-25T02:18:24.000Z</published>
    <updated>2019-09-25T02:53:36.911Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>在 js 中, 方法定义在原型对象中, 而属性定义在实例对象中,调用方法的时候, 实例对象本身是没有该成员的, 但是依旧可以调用该方法, 好像这个方法就是该实例对象的一样. 因此, 我们称该实例对象继承自原型对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var Person=&#123;</span><br><span class="line">  sayHello:function()&#123;</span><br><span class="line">    console.log(&apos;我是&apos;+this.name+&apos;今年&apos;+this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//student构造函数</span><br><span class="line">function Student(name,age)&#123;</span><br><span class="line">  this.name=name;</span><br><span class="line">  this.age=age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这里把Person对象赋值到Student构造函数的原型对象上，这样Student构造函数的实例就可以运用Person对象的方法</span><br><span class="line">Student.prototype=Person;</span><br><span class="line"></span><br><span class="line">//根据Student构造函数创建一个实例对象s1.</span><br><span class="line">var s1=new Student(&apos;lilei&apos;,18);</span><br><span class="line"></span><br><span class="line">s1.sayHello();</span><br></pre></td></tr></table></figure><h4 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h4><p>就是将一个对象中的成员加到另一个对象中（通过自定义 extend 方法完成继承）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var obj2= &#123;</span><br><span class="line">  name:&apos;lilei&apos;,</span><br><span class="line">  sayHello:function()&#123;</span><br><span class="line">      console.log(&apos;我是&apos;+this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var obj3= &#123;</span><br><span class="line">  age:18,</span><br><span class="line">  sayHello1:function()&#123;</span><br><span class="line">    console.log(&apos;我是&apos;+this.name+&apos;今年&apos;+this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var obj1=&#123;</span><br><span class="line">  extend:function(obj)&#123;</span><br><span class="line"></span><br><span class="line">    //arguments为函数中默认的对象，里面存储着所有的函数传入参数。</span><br><span class="line">    for(var i=0; i&lt; arguments.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">      for(var k in arguments[i])&#123;</span><br><span class="line">          this[k]=arguments[i][k];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//将obj2和obj3混入到obj1中</span><br><span class="line">obj1.extend(obj2,obj3);</span><br><span class="line"></span><br><span class="line">obj1.sayHello();</span><br><span class="line"></span><br><span class="line">obj1.sayHello1();</span><br></pre></td></tr></table></figure><h4 id="混合式继承"><a href="#混合式继承" class="headerlink" title="混合式继承"></a>混合式继承</h4><p>将多个对象的各个功能混合在一起，就是通过混入的方式，加到构造函数的原型（prototype）上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var Person=&#123;</span><br><span class="line">    sayHello:function()&#123;</span><br><span class="line">      console.log(&apos;我是&apos;+this.name+&apos;今年&apos;+this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function Student(name,age)&#123;//student构造函数</span><br><span class="line">  this.name=name;</span><br><span class="line">  this.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.extend=function(obj)&#123;</span><br><span class="line">  for(var k in obj)&#123;</span><br><span class="line">    this[k]=obj[k];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据Student构造函数创建一个实例对象s1.</span><br><span class="line">var s1=new Student(&apos;lilei&apos;,18);</span><br><span class="line"></span><br><span class="line">// 根据Student构造函数创建一个实例对象s2.</span><br><span class="line">var s2=new Student(&apos;lllli&apos;,18);</span><br><span class="line"></span><br><span class="line">// 这样就是Student构造函数继承了Person对象。所有Student构造函数创建的实例都要Pserson对象的方法</span><br><span class="line">Student.prototype.extend(Person);</span><br><span class="line"></span><br><span class="line">// 这样就是Student构造函数的实例s1继承了Person对象。其他Student构造函数创建的实例都没有Pserson对象的方法</span><br><span class="line">// s1.extend(Person);</span><br><span class="line"></span><br><span class="line">s1.sayHello();</span><br><span class="line">s2.sayHello();</span><br></pre></td></tr></table></figure><ul><li>关于继承 ES5 中给我们内置了一个快速的方法：Object.create(对象)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var o=&#123;</span><br><span class="line">  name:&apos;lilei&apos;,</span><br><span class="line">  age:16,</span><br><span class="line">  sayHello:function()&#123;</span><br><span class="line">    console.log(&apos;我是&apos;+this.name+&apos;今年&apos;+this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//ES5中内置的Object.create()方法可以让我们快速的继承</span><br><span class="line">var obj=Object.create(o);</span><br><span class="line"></span><br><span class="line">obj.sayHello();</span><br></pre></td></tr></table></figure><h4 id="上下文调用实现继承"><a href="#上下文调用实现继承" class="headerlink" title="上下文调用实现继承"></a>上下文调用实现继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var Person=&#123;</span><br><span class="line">  sayHello:function()&#123;</span><br><span class="line">    console.log(&apos;我是&apos;+this.name+&apos;今年&apos;+this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Student(name,age)&#123;//student构造函数</span><br><span class="line">  this.name=name;</span><br><span class="line">  this.age=age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//根据Student构造函数创建一个实例对象s1.</span><br><span class="line">var s1=new Student(&apos;lilei&apos;,18);</span><br><span class="line"></span><br><span class="line">//根据Student构造函数创建一个实例对象s2.</span><br><span class="line">var s2=new Student(&apos;lllli&apos;,18);</span><br><span class="line"></span><br><span class="line">Person.sayHello.call(s2)；</span><br></pre></td></tr></table></figure><h4 id="ES6-的继承"><a href="#ES6-的继承" class="headerlink" title="ES6 的继承"></a>ES6 的继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// es6继承</span><br><span class="line">class Animal &#123;</span><br><span class="line"></span><br><span class="line">  //构造函数，里面写上对象的属性</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    this.name = props.name || &apos;Unknown&apos;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //方法写在后面</span><br><span class="line">  eat() &#123;</span><br><span class="line">    //父类共有的方法</span><br><span class="line">    console.log(this.name + &quot; will eat pests.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//class继承</span><br><span class="line">class Bird extends Animal &#123;</span><br><span class="line"></span><br><span class="line">  //构造函数</span><br><span class="line">  //props是继承过来的属性，myAttribute是自己的属性</span><br><span class="line">  constructor(props,myAttribute) &#123;</span><br><span class="line">    //调用实现父类的构造函数</span><br><span class="line">    //相当于获得父类的this指向</span><br><span class="line">    super(props)</span><br><span class="line"></span><br><span class="line">    //父类的属性，也可写在父类中</span><br><span class="line">    this.type = props.type || &quot;Unknown&quot;;</span><br><span class="line"></span><br><span class="line">    //自己的私有属性</span><br><span class="line">    this.attr = myAttribute;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //自己私有的方法</span><br><span class="line">  fly() &#123;</span><br><span class="line">    console.log(this.name + &quot; are friendly to people.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //自己私有的方法</span><br><span class="line">  myattr() &#123;</span><br><span class="line">    console.log(this.type+&apos;---&apos;+this.attr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过new实例化</span><br><span class="line">var myBird = new Bird(&#123;</span><br><span class="line">  name: &apos;小燕子&apos;,</span><br><span class="line"></span><br><span class="line">  //卵生动物</span><br><span class="line">  type: &apos;Egg animal&apos;</span><br><span class="line">&#125;,&apos;Bird class&apos;)</span><br><span class="line"></span><br><span class="line">myBird.eat()</span><br><span class="line">myBird.fly()</span><br><span class="line">myBird.myattr()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 14 2019 15:05:18 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;原型式继承&quot;&gt;&lt;a href=&quot;#原型式继承&quot; class=&quot;headerlink&quot; title=&quot;原型式继承&quot;&gt;&lt;/a&gt;原型式继承&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://liushuai97.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
